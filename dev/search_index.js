var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeighborhoodApproximationIndex","category":"page"},{"location":"#NeighborhoodApproximationIndex","page":"Home","title":"NeighborhoodApproximationIndex","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NeighborhoodApproximationIndex]","category":"page"},{"location":"#NeighborhoodApproximationIndex.KnrIndex-Tuple{Distances.SemiMetric, SimilaritySearch.AbstractDatabase}","page":"Home","title":"NeighborhoodApproximationIndex.KnrIndex","text":"KnrIndex(\n    dist::SemiMetric,\n    db;\n    numcenters=ceil(Int, sqrt(length(db))),\n    refs=:rand,\n    centers=:delone,\n    k=5,\n    pools=nothing,\n    parallel_block=Threads.nthreads() > 1 ? 1024 : 1,\n    verbose=true\n)\n\nCreates a KnrIndex, high level interface.\n\ndist: Distance object (a SemiMetric object, see Distances.jl)\ndb: Objects to be indexed Please note that these indexes will be created with generic parameters\nrefs: the se of reference, only used if centers=nothing\npools: an object with preallocated caches specific for KnrIndex, if pools=nothing it will use default caches.\nparallel_block Parallel construction works on batches, this is the size of these blocks\nverbose true if you want to see messages\n\n\n\n\n\n","category":"method"},{"location":"#NeighborhoodApproximationIndex.references-Tuple{Distances.SemiMetric, Any}","page":"Home","title":"NeighborhoodApproximationIndex.references","text":"references(dist::SemiMetric, db; <kwargs>) -> SubDatabase\n\nComputes a set of references, a sample of db, using the KCenters specification, it is a wrapper to kcenters function in the KCenters.jl package. The set of references are computed taking into account the specified r but also the distance function dist.\n\nArguments\n\ndist: a distance function\ndb: the database to be sampled\n\nKeyword arguments\n\nk::Int: the number of centers to compute, defaults to sqrt(|db|)\nmaxiters::Int: number of iterationso  of the Lloyd algorithm that should be applied on the initial computation of centers, that is, maxiters > 0 applies maxiters iterations of the algorithm.\ntol::Float64: change tolerance to stop the Lloyd algorithm (error changes smaller than tol among iterations will stop the algorithm)\ninitial: initial centers or a strategy to compute initial centers, symbols :rand, :fft, and :dnet.\n\nThere are several interactions between initial values and parameter interactions (described in KCenters object), for instance, the maxiters > 0 apply the Lloyd's algorithm to the initial computation of references.\n\nif initial=:rand:\nmaxiters = 0 will retrieve a simple random sampling\nmaxiters > 0' achieve kmeans-centroids,maxiters` should be set appropiately for the the dataset\nif initial=:dnet:\nmaxiters = 0 computes a pure density-net\nmaxiters > 0 will compute a kmeans centroids but with an initialization based on the dnet\nif initial=:fft:\nmaxiters = 0 computes k centers with the farthest first traversal algorithm\nmaxiters > 0 will use the FFT based kcenters as initial points for the Lloyd algorithm\n\nNote 1: maxiters > 0 needs to compute centroids and these centroids should be defined for the specific data model, and also be of use in the specific metric distance and error function.\n\nNote 2: The error function is defined as the mean of distances of all objects in db to its associated nearest centers in each iteration.\n\nNote 3: The computation of references on large databases can be prohibitive, in these cases please consider to work on a sample of db\n\n\n\n\n\n","category":"method"},{"location":"#SimilaritySearch.optimize!","page":"Home","title":"SimilaritySearch.optimize!","text":"optimize!(perf::Performance, index::KnrIndex, recall=0.9; numqueries=128, verbose=false, k=10)\n\nTries to configure index to achieve the specified recall for fetching k nearest neighbors.\n\n\n\n\n\n","category":"function"},{"location":"#SimilaritySearch.search-Tuple{KnrIndex, Any, SimilaritySearch.KnnResult}","page":"Home","title":"SimilaritySearch.search","text":"search(idx::KnrIndex, q, res::KnnResult; ksearch=idx.ksearch, rerank=idx.rerank, pools=getpools(D))\n\nSearches nearest neighbors of q inside the index under the distance function dist.\n\n\n\n\n\n","category":"method"}]
}
